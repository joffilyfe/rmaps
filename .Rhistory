auto.arima(jp$n)
auto.arima(jp)
jp
auto.arima(jp[,2])
Data <- data.frame(
Date=seq.Date(from=t0,by='month',length.out=10),
Value=(cumsum(rnorm(10,3,2))+rnorm(10))
Data
Data
Data <- data.frame(
Date=seq.Date(from=t0,by='month',length.out=10),
Value=(cumsum(rnorm(10,3,2))+rnorm(10))
)
t0 <- as.Date("2013-06-01",format="%Y-%m-%d")  # Initial month
)
Data <- data.frame(
Date=seq.Date(from=t0,by='month',length.out=10),
Value=(cumsum(rnorm(10,3,2))+rnorm(10)))
Data
set.seed(1000)
)
tData <- ts(Data$Value,
start=c(2013,6),
frequency=12
)
tData
Data
Data
tData
Mod1 <- auto.arima(tData)
Mod1
plot(forecast(Mod1, h=2))
Mod2 <- eta(tData)
Mod2 <- eta(tData)
ets
eta
Mod2 <- ets(tData)
plot(forecast(Mod2, h=2))
)
plot(forecast(Mod2, h=2))
plot(forecast(Mod2, h=2))
plot(forecast(Mod1, h=2))
Data
tData
table(tData)
tData
str(tData)
str(tData)
tData
dados2
dados2 <- casos_dengue_2016 %>% select(month, ID_MUNICIP, DT_NOTIFIC)
dados2
set.seed(1000)
dados2$month[1]
dados2$month
dados2$DT_NOTIFIC
t0 <- as.Date("2016-01-01",format="%Y-%m-%d")  # Initial month
Data <- data.frame(
Date=seq.Date(from=t0, by='month', length.out=12),
Value=1)
Data
tData <- ts(Data$Value,
start=c(2013,6),
frequency=12
)
Mod1 <- auto.arima(tData)
plot(forecast(Mod1, h=2))
tData <- ts(Data$Value,
start=c(2017,1),
frequency=12
)
Mod1 <- auto.arima(tData)
plot(forecast(Mod1, h=2))
Data <- data.frame(
Date=seq.Date(from=t0, by='month', length.out=12),
Value=c(1:12))
Data
Data <- data.frame(
Date=seq.Date(from=t0, by='month', length.out=12),
Value=count(dados2, month))
Data
ggplot(data = casos_por_mes2) +
geom_point(data = casos_por_mes2, aes(x = reorder(nome, month), y = n)) +
geom_line(data = casos_por_mes2, aes(x = month, y = n)) +
xlab("Meses") +
ylab("Quantidade de casos") +
theme_bw(12)
casos_por_mes2
Data
tData <- ts(Data$Value,
start=c(2017,1),
frequency=12
)
Data <- data.frame(
Date=seq.Date(from=t0, by='month', length.out=12),
Value=count(dados2, month))
tData <- ts(Data$Value,
start=c(2017, 1),
frequency=12)
Data
tData <- ts(Data$Value.n,
start=c(2017, 1),
frequency=12)
Mod1 <- auto.arima(tData)
plot(forecast(Mod1, h=2))
plot(forecast(Mod1, h=3))
plot(forecast(Mod1))
ggplot(data = Mod1)
ggplot(data = forecast(Mod1, h=3))
ggplot(data = forecast(Mod1, h=2))
plot(forecast(Mod1, h=3))
plot(forecast(Mod1, h=1))
set.seed(1000)
library(tidyverse)
library(lubridate)
set.seed(1000)
# Load dataset
dengue_2015_pb <- read_csv("/Users/joffily/IFPB/TCC/secretaria/data/dengue-2015.csv", col_names=TRUE)
summary(dengue_2015_pb)
# Extraindo colunas interessadas
casos_dengue_2015 <- dengue_2015_pb %>% select(DT_NOTIFIC, ID_MUNICIP)
# Convertendo datas
casos_dengue_2015$DT_NOTIFIC <- ymd(casos_dengue_2015$DT_NOTIFIC)
# Vendo resultado
head(casos_dengue_2015)
# Guardando os meses
casos_dengue_2015$month <- month(casos_dengue_2015$DT_NOTIFIC)
# Selecionando o mes e o municipio
dados <- casos_dengue_2015 %>% select(month, ID_MUNICIP)
# Contando quantos casos por mês
casos_por_mes <- count(dados, month)
# Plotando os casos
ggplot(data = casos_por_mes) +
geom_point(data = casos_por_mes, aes(x = month, y = n)) +
geom_line(data = casos_por_mes, aes(x = month, y = n)) +
theme_bw(12)
# Predizendo casos que podem acontecer
l <- lm(n ~ month, data=casos_por_mes)
predicted <- predict(l, casos_por_mes)
por_municipio <- count(dados, ID_MUNICIP, sort=TRUE)
por_municipio
t0 <- as.Date("2016-01-01",format="%Y-%m-%d")  # Initial month
Data1 <- data.frame(
Date=seq.Date(from=t0, by='month', length.out=12),
Value=count(dados, month))
Data1
t0 <- as.Date("2015-01-01",format="%Y-%m-%d")  # Initial month
Data1 <- data.frame(
Date=seq.Date(from=t0, by='month', length.out=12),
Value=count(dados, month))
tData1 <- ts(Data1$Value.n,
start=c(2017, 1),
frequency=12)
Mod11 <- auto.arima(tData1)
plot(forecast(Mod11, h=1))
tData1 <- ts(Data1$Value.n,
start=c(2015, 1),
frequency=12)
Mod11 <- auto.arima(tData1)
plot(forecast(Mod11, h=1))
plot(forecast(Mod1, h=1))
Data1 <- data.frame(
Date=seq.Date(from=t0, by='month', length.out=12),
Value=count(dados, month))
tData1 <- ts(Data1$Value.n,
start=c(2016, 1),
frequency=12)
Mod11 <- auto.arima(tData1)
plot(forecast(Mod11, h=1))
plot(forecast(Mod11, h=2))
plot(forecast(Mod11, h=10))
plot(forecast(Mod11, h=100))
plot(forecast(Mod11, h=12))
Mod22 <- eta(tData11)
Mod22 <- ets(tData11)
Mod22 <- ets(tData1)
plot(forecast(Mod22, h=2))
plot(forecast(Mod22, h=10))
plot(forecast(Mod22, h=1))
ggplot(data = casos_por_mes) +
geom_point(data = casos_por_mes, aes(x = month, y = n)) +
geom_line(data = casos_por_mes, aes(x = month, y = n)) +
theme_bw(12)
plot(forecast(Mod11, h=12))
plot(forecast(Mod11, h=3))
Mod22 <- ets(tData1)
plot(forecast(Mod22, h=1))
ggplot(data = casos_por_mes) +
geom_point(data = casos_por_mes, aes(x = month, y = n)) +
geom_line(data = casos_por_mes, aes(x = month, y = n)) +
theme_bw(12)
ver_casos_em <- function(id) {
cidade <- casos_dengue_2016 %>%
filter(ID_MUNICIP == id) %>%
count(month) %>%
merge(meses)
cidade %>% ggplot() +
geom_point(data=cidade, aes(x=reorder(cidade$nome, month), y = n, size = 5, colour = n)) +
geom_line(data = cidade, aes(x = month, y = n), linetype = 2) +
theme_bw(12) +
ylab("Casos em..") +
xlab("Meses") +
xlab("Meses") + scale_colour_gradient(high = "red", low = "#cccccc")
cidade
}
ver_casos_em(250400)
ver_casos_em <- function(id) {
cidade <- casos_dengue_2016 %>%
filter(ID_MUNICIP == id) %>%
count(month) %>%
merge(meses)
cidade %>% ggplot() +
geom_point(data=cidade, aes(x=reorder(cidade$nome, month), y = n, size = 5, colour = n)) +
geom_line(data = cidade, aes(x = month, y = n), linetype = 2) +
theme_bw(12) +
ylab("Casos em..") +
xlab("Meses") +
xlab("Meses") + scale_colour_gradient(high = "red", low = "#cccccc")
#  cidade
}
ver_casos_em(250400)
cidade
ver_casos_em <- function(id) {
cidade <- casos_dengue_2016 %>%
filter(ID_MUNICIP == id) %>%
count(month) %>%
merge(meses)
cidade %>% ggplot() +
geom_point(data=cidade, aes(x=reorder(cidade$nome, month), y = n, size = 5, colour = n)) +
geom_line(data = cidade, aes(x = month, y = n), linetype = 2) +
theme_bw(12) +
ylab("Casos em..") +
xlab("Meses") +
xlab("Meses") + scale_colour_gradient(high = "red", low = "#cccccc")
cidade
}
ver_casos_em(250400)
ver_casos_em(250400)
ver_casos_em <- function(id) {
cidade <- casos_dengue_2016 %>%
filter(ID_MUNICIP == id) %>%
count(month) %>%
merge(meses)
cidade %>% ggplot() +
geom_point(data=cidade, aes(x=reorder(cidade$nome, month), y = n, size = 5, colour = n)) +
geom_line(data = cidade, aes(x = month, y = n), linetype = 2) +
theme_bw(12) +
ylab("Casos em..") +
xlab("Meses") +
xlab("Meses") + scale_colour_gradient(high = "red", low = "#cccccc")
return(cidade)
}
ver_casos_em(250400)
plotar_casos <- function(cidade) {
cidade %>% ggplot() +
geom_point(data=cidade, aes(x=reorder(cidade$nome, month), y = n, size = 5, colour = n)) +
geom_line(data = cidade, aes(x = month, y = n), linetype = 2) +
theme_bw(12) +
ylab("Casos em..") +
xlab("Meses") +
xlab("Meses") + scale_colour_gradient(high = "red", low = "#cccccc")
}
ver_casos_em(250400)
plotar_casos(ver_casos_em(250400))
plotar_casos(ver_casos_em(250750))
precipitacao <- c(103, 127, 140, 292, 359, 177)
predict(lm(n ~ month, cortado), cortado)
cortado$caso_previstos <- predict(lm(n ~ month+ precipitacao, cortado), cortado)
cortado <- jp[1:6,]
precipitacao <- c(103, 127, 140, 292, 359, 177)
predict(lm(n ~ month, cortado), cortado)
cortado$caso_previstos <- predict(lm(n ~ month+ precipitacao, cortado), cortado)
cortado %>% ggplot() +
geom_point(data=cortado, aes(x=reorder(cortado$nome, month), y = caso_previstos)) +
geom_line(data = cortado, aes(x = month, y = caso_previstos)) +
theme_bw(12)
cortado %>% ggplot() +
geom_point(data=cortado, aes(x=reorder(cortado$nome, month), y = n)) +
geom_line(data = cortado, aes(x = month, y = n)) +
theme_bw(12)
cortado %>% ggplot() +
geom_point(data=cortado, aes(x=reorder(cortado$nome, month), y = caso_previstos)) +
geom_line(data = cortado, aes(x = month, y = caso_previstos)) +
theme_bw(12)
plotar_casos(ver_casos_em(250750))
plotar_casos(cortado)
ggplot(data = result, aes(long, lat, group=group)) +
geom_path(color='black', size=0.2) +
scale_fill_brewer(palette='PuRd')
library(maps)
library(mapdata)
library(maptools) #Ler ESRI shapefiles
library(RColorBrewer)
library(ggplot2)
library(dplyr)
require("rgdal")
require("plyr")
casos_2016 <- read.csv("numero_casos_2016.csv")
setwd("~/IFPB/TCC/mapas")
setwd("~/IFPB/TCC/mapas")
casos_2016 <- read.csv("numero_casos_2016.csv")
par(mar=c(1,1,1,1))
map("world","Brazil")
paraiba <- readShapePoly("./pb_municipios/25MUE250GC_SIR.shp")
proj4string(paraiba)
par(mar=c(0,0,0,0))
plot(paraiba)
paraiba$ID_MUNICIP <- as.numeric(substr(as.character(paraiba$CD_GEOCMU), 1, 6))
paraiba$ID_MUNICIP==250750
plot(paraiba[paraiba$NM_MUNICIP=="JOÃO PESSOA",], add=T, col = "red")
plot(paraiba[paraiba$NM_MUNICIP=="GUARABIRA",], add=T, col = alpha("green", 0.5))
paraiba_with_n <- merge(paraiba, casos_2016)
paraiba_with_n$n[is.na(paraiba_with_n$n)] <- runif(26, 0, 0)
paraiba_with_n@data$ID_MUNICIP
paraiba_with_n@data$id = as.numeric(rownames(paraiba_with_n@data))-1
paraiba_with_n.points = fortify(paraiba_with_n, by="id")
paraiba_with_n.df = join(paraiba_with_n.points, paraiba_with_n@data, by="id")
ggplot(paraiba_with_n.df, aes(long, lat, group=group)) +
geom_polygon(aes(fill=n)) +
#scale_fill_gradient(low = "red", high = "black") +
scale_fill_gradientn(colours = pal[1:5]) +
geom_path(color='black', size=0.1) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks.x=element_blank(),
axis.ticks.y=element_blank())
result <- merge(paraiba, casos_2016)
result$n[is.na(result$n)] <- runif(26, 0, 0)
result[result$ID_MUNICIP==250750,]$NM_MUNICIP
result[is.na(result$n),]$NM_MUNICIP
pal <- colorRampPalette(brewer.pal(9, 'PuRd'))(length(result$n))
pal <- pal[with(result, findInterval(result$n, sort(unique(result$n))))]
pal
plot(result, col = pal)
pts.PB <- getSpatialPolygonsLabelPoints(result[result$n >= 1000,])
text(pts.PB@coords, labels=result$n[result$n >= 1000], cex = 1)
plot(paraiba[paraiba$NM_MUNICIP=="JOÃO PESSOA",], add=T, col = "red")
plot(paraiba[paraiba$NM_MUNICIP=="GUARABIRA",], add=T, col = alpha("green", 0.5))
plot(paraiba[paraiba$NM_MUNICIP=="CONCEIÇÃO",], add=T, col = alpha("blue", 0.5))
legend('topright', legend = levels(result$NM_MUNICIP), col = pal, cex = 0.5, pch = 10)
ggplot(data = result, aes(x = long, y = lat, group = group)) +
geom_polygon(colour = "black") +
coord_equal() +
theme()
ggplot(data = result, aes(x= long, y = lat, group=group)) +
geom_polygon(data=result, aes(fill=pal)) +
geom_path(color='black', size=0.2) +
scale_fill_brewer(palette='PuRd')
plot(result, col = result$n)
legend('topright', legend = levels(result$NM_MUNICIP), col = 1:223, cex = 0.8, pch = 1)
ggplot(data = result, aes(x=long, y=lat, group=group),
fill="white", color="#7f7f7f", size=0.25) +
geom_path(color='black', size=0.2) + coord_map() +
theme(plot.background = element_rect(fill = "transparent", colour = NA),
panel.border = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right") +
scale_fill_manual(values=colorRampPalette(brewer.pal(9, 'Reds'))(1), name="NM_MUNICIP")
casos_pb <- count(casos_dengue_2015, ID_MUNICIP, sort = TRUE)
casos_pb$codigo <- casos_pb$ID_MUNICIP
paraiba$codigo <- as.character(paraiba$CD_GEOCMU)
paraiba$codigo <- substr(paraiba$codigo, 1, 6)
paraiba$codigo <- as.numeric(paraiba$codigo)
result <- merge(casos_pb, paraiba, by = "codigo")
casos_dengue_2015
casos_pb <- count(casos_dengue_2015, ID_MUNICIP, sort = TRUE)
casos_pb <- count(casos_dengue_2015, ID_MUNICIP)
casos_pb <- count(casos_dengue_2015, casos_dengue_2015$ID_MUNICIP, sort = TRUE)
casos_pb <- count(casos_dengue_2015, casos_dengue_2015$ID_MUNICIP)
casos_dengue_2015
count(casos_dengue_2015)
?count
count(casos_dengue_2015, vars = ID_MUNICIP)
count(casos_dengue_2015, vars = casos_dengue_2015$ID_MUNICIP)
count(casos_dengue_2015)
count(casos_dengue_2015$ID_MUNICIP)
casos_pb <- count(casos_dengue_2015$ID_MUNICIP, sort = TRUE)
count(casos_dengue_2015$ID_MUNICIP, sort = TRUE)
count(casos_dengue_2015$ID_MUNICIP)
count(casos_dengue_2015$ID_MUNICIP, ID_MUNICIP)
casos_pb <- count(casos_dengue_2015$ID_MUNICIP)
casos_pb$codigo <- casos_pb$ID_MUNICIP
paraiba$codigo <- as.character(paraiba$CD_GEOCMU)
paraiba$codigo <- substr(paraiba$codigo, 1, 6)
paraiba$codigo <- as.numeric(paraiba$codigo)
result <- merge(casos_pb, paraiba, by = "codigo")
paraiba$codigo
result <- merge(casos_pb, paraiba, by = "codigo")
casos_pb
result <- merge(casos_pb, paraiba, by = "x")
ggplot(data = result, aes(long, lat, group=group)) +
geom_path(color='black', size=0.2) +
scale_fill_brewer(palette='PuRd')
?count
plyr::count()
plyr::count(casos_dengue_2015)
plyr::count(casos_dengue_2015, "ID_MUNICIP")
plyr::count(casos_dengue_2015, "ID_MUNICIP", sort = TRUE)
dplyr::count(casos_dengue_2015, "ID_MUNICIP", sort = TRUE)
dplyr::count(casos_dengue_2015, "ID_MUNICIP")
dplyr::count(casos_dengue_2015, ID_MUNICIP)
dplyr::count(casos_dengue_2015, ID_MUNICIP, sort = TRUE)
casos_pb <- dplyr::count(casos_dengue_2015, ID_MUNICIP, sort = TRUE)
casos_pb$codigo <- casos_pb$ID_MUNICIP
casos_pb
paraiba$codigo
paraiba$codigo <- as.character(paraiba$CD_GEOCMU)
paraiba$codigo <- substr(paraiba$codigo, 1, 6)
paraiba$codigo <- as.numeric(paraiba$codigo)
result <- merge(casos_pb, paraiba, by = "codigo")
paraiba[result$codigo == 250970,]$NM_MUNICIP
ggplot(data = result, aes(long, lat, group=group)) +
geom_path(color='black', size=0.2) +
scale_fill_brewer(palette='PuRd')
result
ggplot(data = result, aes(long, lat, group=group)) +
geom_path(color='black', size=0.2) +
scale_fill_brewer(palette='PuRd')
ggplot(data = result, aes(long, lat, group=group)) +
geom_path(color='black', size=0.2)
ggplot(data = result, aes(long, lat, group=group))
library(RColorBrewer)
ggplot(data = result, aes(x = long, y = lat, group = group)) +
geom_polygon(colour = "black") +
coord_equal() +
theme()
library(ggplot2)
ggplot(data = result, aes(x = long, y = lat, group = group)) +
geom_polygon(colour = "black") +
coord_equal() +
theme()
ggplot(data = result, aes(x= long, y = lat, group=group)) +
geom_polygon(data=result, aes(fill=pal)) +
geom_path(color='black', size=0.2) +
scale_fill_brewer(palette='PuRd')
ggplot(data = result, aes(x=long, y=lat, group=group),
fill="white", color="#7f7f7f", size=0.25) +
geom_path(color='black', size=0.2) + coord_map() +
theme(plot.background = element_rect(fill = "transparent", colour = NA),
panel.border = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right") +
scale_fill_manual(values=colorRampPalette(brewer.pal(9, 'Reds'))(1), name="NM_MUNICIP")
result
paraiba <- readShapePoly("./pb_municipios/25MUE250GC_SIR.shp")
proj4string(paraiba)
plot(paraiba)
paraiba$ID_MUNICIP <- as.numeric(substr(as.character(paraiba$CD_GEOCMU), 1, 6))
paraiba$ID_MUNICIP==250750
plot(paraiba[paraiba$NM_MUNICIP=="JOÃO PESSOA",], add=T, col = "red")
casos_2016
paraiba_with_n <- merge(paraiba, casos_2016)
paraiba_with_n
paraiba_with_n$n[is.na(paraiba_with_n$n)] <- runif(26, 0, 0)
paraiba_with_n@data$ID_MUNICIP
paraiba_with_n@data$id = as.numeric(rownames(paraiba_with_n@data))-1
paraiba_with_n.points = fortify(paraiba_with_n, by="id")
paraiba_with_n.df = join(paraiba_with_n.points, paraiba_with_n@data, by="id")
ggplot(paraiba_with_n.df, aes(long, lat, group=group)) +
geom_polygon(aes(fill=n)) +
#scale_fill_gradient(low = "red", high = "black") +
scale_fill_gradientn(colours = pal[1:5]) +
geom_path(color='black', size=0.1) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks.x=element_blank(),
axis.ticks.y=element_blank())
ggplot(data = result, aes(long, lat, group=group)) +
geom_path(color='black', size=0.2) +
scale_fill_brewer(palette='PuRd')
plot(result, col = pal)
ggplot(paraiba_with_n.df, aes(long, lat, group=group)) +
geom_polygon(aes(fill=n)) +
#scale_fill_gradient(low = "red", high = "black") +
scale_fill_gradientn(colours = pal[1:5]) +
geom_path(color='black', size=0.1) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks.x=element_blank(),
axis.ticks.y=element_blank())
result <- merge(paraiba, casos_2016)
result$n[is.na(result$n)] <- runif(26, 0, 0)
result[result$ID_MUNICIP==250750,]$NM_MUNICIP
result[is.na(result$n),]$NM_MUNICIP
pal <- colorRampPalette(brewer.pal(9, 'PuRd'))(length(result$n))
pal <- pal[with(result, findInterval(result$n, sort(unique(result$n))))]
pal
plot(result, col = pal)
pts.PB <- getSpatialPolygonsLabelPoints(result[result$n >= 1000,])
text(pts.PB@coords, labels=result$n[result$n >= 1000], cex = 1)
ggplot(data = result, aes(x = long, y = lat, group = group)) +
geom_polygon(colour = "black") +
coord_equal() +
theme()
plot(result, col = pal)
pts.PB <- getSpatialPolygonsLabelPoints(result[result$n >= 1000,])
text(pts.PB@coords, labels=result$n[result$n >= 1000], cex = 1)
plot(paraiba[paraiba$NM_MUNICIP=="JOÃO PESSOA",], add=T, col = "red")
plot(paraiba[paraiba$NM_MUNICIP=="CONCEIÇÃO",], add=T, col = alpha("blue", 0.5))
ggplot(data = result, aes(x = long, y = lat, group = group)) +
geom_polygon(colour = "black") +
coord_equal() +
theme()
text(pts.PB@coords, labels=result$n[result$n >= 1000], cex = 1)
plot(result, col = pal)
pts.PB <- getSpatialPolygonsLabelPoints(result[result$n >= 100,])
text(pts.PB@coords, labels=result$n[result$n >= 100], cex = 1)
pts.PB <- getSpatialPolygonsLabelPoints(result[result$n >= 1,])
text(pts.PB@coords, labels=result$n[result$n >= 1], cex = 1)
